{"ast":null,"code":"'use strict';\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n['default'] = e;\n  return Object.freeze(n);\n}\n\nconst NAMESPACE = 'skyra-discord-components-core';\nlet contentRef;\nlet hostTagName;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || {\n  head: {}\n};\nconst plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: h => h(),\n  raf: h => requestAnimationFrame(h),\n  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n  ce: (eventName, opts) => new CustomEvent(eventName, opts)\n};\n\nconst promiseResolve = v => Promise.resolve(v);\n\nconst supportsConstructibleStylesheets = /*@__PURE__*/(() => {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replace === 'function';\n  } catch (e) {}\n\n  return false;\n})();\n\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\n\nconst createTime = function (fnName) {\n  let tagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst uniqueTime = (key, measureText) => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst rootAppliedStyles = new WeakMap();\n\nconst registerStyle = (scopeId, cssText, allowCS) => {\n  let style = styles.get(scopeId);\n\n  if (supportsConstructibleStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    style.replace(cssText);\n  } else {\n    style = cssText;\n  }\n\n  styles.set(scopeId, style);\n};\n\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n  let scopeId = getScopeId(cmpMeta);\n  let style = styles.get(scopeId); // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n\n  styleContainerNode = styleContainerNode.nodeType === 11\n  /* DocumentFragment */\n  ? styleContainerNode : doc;\n\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      let styleElm;\n\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n\n      if (!appliedStyles.has(scopeId)) {\n        {\n          {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n    }\n  }\n\n  return scopeId;\n};\n\nconst attachStyles = hostRef => {\n  const cmpMeta = hostRef.$cmpMeta$;\n  const elm = hostRef.$hostElement$;\n  const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  addStyle(elm.getRootNode(), cmpMeta);\n  endAttachStyles();\n};\n\nconst getScopeId = (cmp, mode) => 'sc-' + cmp.$tagName$;\n/**\n * Default style mode id\n */\n\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\n\n\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\n\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\n\nconst isComplexType = o => {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\n\n\nconst h = function (nodeName, vnodeData) {\n  let child = null;\n  let key = null;\n  let slotName = null;\n  let simple = false;\n  let lastSimple = false;\n  let vNodeChildren = [];\n\n  const walk = c => {\n    for (let i = 0; i < c.length; i++) {\n      child = c[i];\n\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        }\n\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n\n        lastSimple = simple;\n      }\n    }\n  };\n\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n\n  walk(children);\n\n  if (vnodeData) {\n    // normalize class / classname attributes\n    if (vnodeData.key) {\n      key = vnodeData.key;\n    }\n\n    if (vnodeData.name) {\n      slotName = vnodeData.name;\n    }\n\n    {\n      const classData = vnodeData.className || vnodeData.class;\n\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(k => classData[k]).join(' ');\n      }\n    }\n  }\n\n  if (typeof nodeName === 'function') {\n    // nodeName is a functional component\n    return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n  }\n\n  const vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n\n  {\n    vnode.$key$ = key;\n  }\n  {\n    vnode.$name$ = slotName;\n  }\n  return vnode;\n};\n\nconst newVNode = (tag, text) => {\n  const vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  {\n    vnode.$attrs$ = null;\n  }\n  {\n    vnode.$key$ = null;\n  }\n  {\n    vnode.$name$ = null;\n  }\n  return vnode;\n};\n\nconst Host = {};\n\nconst isHost = node => node && node.$tag$ === Host;\n\nconst vdomFnUtils = {\n  forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n  map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate)\n};\n\nconst convertToPublic = node => ({\n  vattrs: node.$attrs$,\n  vchildren: node.$children$,\n  vkey: node.$key$,\n  vname: node.$name$,\n  vtag: node.$tag$,\n  vtext: node.$text$\n});\n\nconst convertToPrivate = node => {\n  if (typeof node.vtag === 'function') {\n    const vnodeData = Object.assign({}, node.vattrs);\n\n    if (node.vkey) {\n      vnodeData.key = node.vkey;\n    }\n\n    if (node.vname) {\n      vnodeData.name = node.vname;\n    }\n\n    return h(node.vtag, vnodeData, ...(node.vchildren || []));\n  }\n\n  const vnode = newVNode(node.vtag, node.vtext);\n  vnode.$attrs$ = node.vattrs;\n  vnode.$children$ = node.vchildren;\n  vnode.$key$ = node.vkey;\n  vnode.$name$ = node.vname;\n  return vnode;\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n\n\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n  if (oldValue !== newValue) {\n    let isProp = isMemberInElement(elm, memberName);\n    let ln = memberName.toLowerCase();\n\n    if (memberName === 'class') {\n      const classList = elm.classList;\n      const oldClasses = parseClassList(oldValue);\n      const newClasses = parseClassList(newValue);\n      classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n      classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n    } else if (memberName === 'style') {\n      // update style attribute, css properties and values\n      {\n        for (const prop in oldValue) {\n          if (!newValue || newValue[prop] == null) {\n            if (prop.includes('-')) {\n              elm.style.removeProperty(prop);\n            } else {\n              elm.style[prop] = '';\n            }\n          }\n        }\n      }\n\n      for (const prop in newValue) {\n        if (!oldValue || newValue[prop] !== oldValue[prop]) {\n          if (prop.includes('-')) {\n            elm.style.setProperty(prop, newValue[prop]);\n          } else {\n            elm.style[prop] = newValue[prop];\n          }\n        }\n      }\n    } else if (memberName === 'key') ;else if (memberName === 'ref') {\n      // minifier will clean this up\n      if (newValue) {\n        newValue(elm);\n      }\n    } else if (!isProp && memberName[0] === 'o' && memberName[1] === 'n') {\n      // Event Handlers\n      // so if the member name starts with \"on\" and the 3rd characters is\n      // a capital letter, and it's not already a member on the element,\n      // then we're assuming it's an event listener\n      if (memberName[2] === '-') {\n        // on- prefixed events\n        // allows to be explicit about the dom event to listen without any magic\n        // under the hood:\n        // <my-cmp on-click> // listens for \"click\"\n        // <my-cmp on-Click> // listens for \"Click\"\n        // <my-cmp on-ionChange> // listens for \"ionChange\"\n        // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n        memberName = memberName.slice(3);\n      } else if (isMemberInElement(win, ln)) {\n        // standard event\n        // the JSX attribute could have been \"onMouseOver\" and the\n        // member name \"onmouseover\" is on the window's prototype\n        // so let's add the listener \"mouseover\", which is all lowercased\n        memberName = ln.slice(2);\n      } else {\n        // custom event\n        // the JSX attribute could have been \"onMyCustomEvent\"\n        // so let's trim off the \"on\" prefix and lowercase the first character\n        // and add the listener \"myCustomEvent\"\n        // except for the first character, we keep the event name case\n        memberName = ln[2] + memberName.slice(3);\n      }\n\n      if (oldValue) {\n        plt.rel(elm, memberName, oldValue, false);\n      }\n\n      if (newValue) {\n        plt.ael(elm, memberName, newValue, false);\n      }\n    } else {\n      // Set property if it exists and it's not a SVG\n      const isComplex = isComplexType(newValue);\n\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            let n = newValue == null ? '' : newValue; // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n\n            if (memberName === 'list') {\n              isProp = false; // tslint:disable-next-line: triple-equals\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n      /**\n       * Need to manually update attribute if:\n       * - memberName is not an attribute\n       * - if we are rendering the host element in order to reflect attribute\n       * - if it's a SVG, since properties might not work in <svg>\n       * - if the newValue is null/undefined or 'false'.\n       */\n\n\n      let xlink = false;\n      {\n        if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n          memberName = ln;\n          xlink = true;\n        }\n      }\n\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          if (xlink) {\n            elm.removeAttributeNS(XLINK_NS, memberName);\n          } else {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4\n      /* isHost */\n      || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n\n        if (xlink) {\n          elm.setAttributeNS(XLINK_NS, memberName, newValue);\n        } else {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\n\nconst parseClassListRegex = /\\s/;\n\nconst parseClassList = value => !value ? [] : value.split(parseClassListRegex);\n\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  const elm = newVnode.$elm$.nodeType === 11\n  /* DocumentFragment */\n  && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  } // add new & update changed attributes\n\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n  // tslint:disable-next-line: prefer-const\n  let newVNode = newParentVNode.$children$[childIndex];\n  let i = 0;\n  let elm;\n  let childNode;\n  let oldVNode;\n\n  if (!useNativeShadowDom) {\n    // remember for later we need to check to relocate nodes\n    checkSlotRelocate = true;\n\n    if (newVNode.$tag$ === 'slot') {\n      newVNode.$flags$ |= newVNode.$children$ ? // slot element has fallback content\n      2\n      /* isSlotFallback */\n      : // slot element does not have fallback content\n      1\n      /* isSlotReference */\n      ;\n    }\n  }\n\n  if (newVNode.$text$ !== null) {\n    // create text node\n    elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else if (newVNode.$flags$ & 1\n  /* isSlotReference */\n  ) {\n    // create a slot reference node\n    elm = newVNode.$elm$ = doc.createTextNode('');\n  } else {\n    if (!isSvgMode) {\n      isSvgMode = newVNode.$tag$ === 'svg';\n    } // create element\n\n\n    elm = newVNode.$elm$ = doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode.$flags$ & 2\n    /* isSlotFallback */\n    ? 'slot-fb' : newVNode.$tag$);\n\n    if (isSvgMode && newVNode.$tag$ === 'foreignObject') {\n      isSvgMode = false;\n    } // add css classes, attrs, props, listeners, etc.\n\n\n    {\n      updateElement(null, newVNode, isSvgMode);\n    }\n\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i); // return node could have been null\n\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n\n    {\n      if (newVNode.$tag$ === 'svg') {\n        // Only reset the SVG context when we're exiting <svg> element\n        isSvgMode = false;\n      } else if (elm.tagName === 'foreignObject') {\n        // Reenter SVG context when we're exiting <foreignObject> element\n        isSvgMode = true;\n      }\n    }\n  }\n\n  {\n    elm['s-hn'] = hostTagName;\n\n    if (newVNode.$flags$ & (2\n    /* isSlotFallback */\n    | 1\n    /* isSlotReference */\n    )) {\n      // remember the content reference comment\n      elm['s-sr'] = true; // remember the content reference comment\n\n      elm['s-cr'] = contentRef; // remember the slot name, or empty string for default slot\n\n      elm['s-sn'] = newVNode.$name$ || ''; // check if we've got an old vnode for this slot\n\n      oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n\n      if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n        // we've got an old slot vnode and the wrapper is being replaced\n        // so let's move the old slot content back to it's original location\n        putBackInOriginalLocation(oldParentVNode.$elm$, false);\n      }\n    }\n  }\n  return elm;\n};\n\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n  plt.$flags$ |= 1\n  /* isTmpDisconnected */\n  ;\n  const oldSlotChildNodes = parentElm.childNodes;\n\n  for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n    const childNode = oldSlotChildNodes[i];\n\n    if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n      // // this child node in the old element is from another component\n      // // remove this node from the old slot's parent\n      // childNode.remove();\n      // and relocate it back to it's original location\n      parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode)); // remove the old original location comment entirely\n      // later on the patch function will know what to do\n      // and move this to the correct spot in need be\n\n      childNode['s-ol'].remove();\n      childNode['s-ol'] = undefined;\n      checkSlotRelocate = true;\n    }\n\n    if (recursive) {\n      putBackInOriginalLocation(childNode, recursive);\n    }\n  }\n\n  plt.$flags$ &= ~1\n  /* isTmpDisconnected */\n  ;\n};\n\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n  let containerElm = parentElm['s-cr'] && parentElm['s-cr'].parentNode || parentElm;\n  let childNode;\n\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx);\n\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, referenceNode(before));\n      }\n    }\n  }\n};\n\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnode = vnodes[startIdx]) {\n      elm = vnode.$elm$;\n      callNodeRefs(vnode);\n      {\n        // we're removing this element\n        // so it's possible we need to show slot fallback content now\n        checkSlotFallbackVisibility = true;\n\n        if (elm['s-ol']) {\n          // remove the original location comment\n          elm['s-ol'].remove();\n        } else {\n          // it's possible that child nodes of the node\n          // that's being removed are slot nodes\n          putBackInOriginalLocation(elm, true);\n        }\n      } // remove the vnode's element from the dom\n\n      elm.remove();\n    }\n  }\n};\n\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n  let oldStartIdx = 0;\n  let newStartIdx = 0;\n  let idxInOld = 0;\n  let i = 0;\n  let oldEndIdx = oldCh.length - 1;\n  let oldStartVnode = oldCh[0];\n  let oldEndVnode = oldCh[oldEndIdx];\n  let newEndIdx = newCh.length - 1;\n  let newStartVnode = newCh[0];\n  let newEndVnode = newCh[newEndIdx];\n  let node;\n  let elmToMove;\n\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // Vnode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      // Vnode moved right\n      if (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot') {\n        putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n      }\n\n      patch(oldStartVnode, newEndVnode);\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      // Vnode moved left\n      if (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot') {\n        putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n      }\n\n      patch(oldEndVnode, newStartVnode);\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      // createKeyToOldIdx\n      idxInOld = -1;\n      {\n        for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n          if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n            idxInOld = i;\n            break;\n          }\n        }\n      }\n\n      if (idxInOld >= 0) {\n        elmToMove = oldCh[idxInOld];\n\n        if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n          node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld);\n        } else {\n          patch(elmToMove, newStartVnode);\n          oldCh[idxInOld] = undefined;\n          node = elmToMove.$elm$;\n        }\n\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        // new element\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n        newStartVnode = newCh[++newStartIdx];\n      }\n\n      if (node) {\n        {\n          parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n        }\n      }\n    }\n  }\n\n  if (oldStartIdx > oldEndIdx) {\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (newStartIdx > newEndIdx) {\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n\nconst isSameVnode = (vnode1, vnode2) => {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (vnode1.$tag$ === vnode2.$tag$) {\n    if (vnode1.$tag$ === 'slot') {\n      return vnode1.$name$ === vnode2.$name$;\n    }\n\n    {\n      return vnode1.$key$ === vnode2.$key$;\n    }\n  }\n\n  return false;\n};\n\nconst referenceNode = node => {\n  // this node was relocated to a new location in the dom\n  // because of some other component's slot\n  // but we still have an html comment in place of where\n  // it's original location was according to it's original vdom\n  return node && node['s-ol'] || node;\n};\n\nconst parentReferenceNode = node => (node['s-ol'] ? node['s-ol'] : node).parentNode;\n\nconst patch = (oldVNode, newVNode) => {\n  const elm = newVNode.$elm$ = oldVNode.$elm$;\n  const oldChildren = oldVNode.$children$;\n  const newChildren = newVNode.$children$;\n  const tag = newVNode.$tag$;\n  const text = newVNode.$text$;\n  let defaultHolder;\n\n  if (text === null) {\n    {\n      // test if we're rendering an svg element, or still rendering nodes inside of one\n      // only add this to the when the compiler sees we're using an svg somewhere\n      isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n    } // element node\n\n    {\n      if (tag === 'slot') ;else {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n\n    if (oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (oldVNode.$text$ !== null) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      } // add the new vnode children\n\n\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n\n    if (isSvgMode && tag === 'svg') {\n      isSvgMode = false;\n    }\n  } else if (defaultHolder = elm['s-cr']) {\n    // this element has slotted content\n    defaultHolder.parentNode.textContent = text;\n  } else if (oldVNode.$text$ !== text) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.data = text;\n  }\n};\n\nconst updateFallbackSlotVisibility = elm => {\n  // tslint:disable-next-line: prefer-const\n  let childNodes = elm.childNodes;\n  let childNode;\n  let i;\n  let ilen;\n  let j;\n  let slotNameAttr;\n  let nodeType;\n\n  for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n    childNode = childNodes[i];\n\n    if (childNode.nodeType === 1\n    /* ElementNode */\n    ) {\n      if (childNode['s-sr']) {\n        // this is a slot fallback node\n        // get the slot name for this slot reference node\n        slotNameAttr = childNode['s-sn']; // by default always show a fallback slot node\n        // then hide it if there are other slots in the light dom\n\n        childNode.hidden = false;\n\n        for (j = 0; j < ilen; j++) {\n          nodeType = childNodes[j].nodeType;\n\n          if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n            // this sibling node is from a different component OR is a named fallback slot node\n            if (nodeType === 1\n            /* ElementNode */\n            && slotNameAttr === childNodes[j].getAttribute('slot')) {\n              childNode.hidden = true;\n              break;\n            }\n          } else {\n            // this is a default fallback slot node\n            // any element or text node (with content)\n            // should hide the default fallback slot node\n            if (nodeType === 1\n            /* ElementNode */\n            || nodeType === 3\n            /* TextNode */\n            && childNodes[j].textContent.trim() !== '') {\n              childNode.hidden = true;\n              break;\n            }\n          }\n        }\n      } // keep drilling down\n\n\n      updateFallbackSlotVisibility(childNode);\n    }\n  }\n};\n\nconst relocateNodes = [];\n\nconst relocateSlotContent = elm => {\n  // tslint:disable-next-line: prefer-const\n  let childNode;\n  let node;\n  let hostContentNodes;\n  let slotNameAttr;\n  let relocateNodeData;\n  let j;\n  let i = 0;\n  let childNodes = elm.childNodes;\n  let ilen = childNodes.length;\n\n  for (; i < ilen; i++) {\n    childNode = childNodes[i];\n\n    if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n      // first got the content reference comment node\n      // then we got it's parent, which is where all the host content is in now\n      hostContentNodes = node.parentNode.childNodes;\n      slotNameAttr = childNode['s-sn'];\n\n      for (j = hostContentNodes.length - 1; j >= 0; j--) {\n        node = hostContentNodes[j];\n\n        if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n          // let's do some relocating to its new home\n          // but never relocate a content reference node\n          // that is suppose to always represent the original content location\n          if (isNodeLocatedInSlot(node, slotNameAttr)) {\n            // it's possible we've already decided to relocate this node\n            relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node); // made some changes to slots\n            // let's make sure we also double check\n            // fallbacks are correctly hidden or shown\n\n            checkSlotFallbackVisibility = true;\n            node['s-sn'] = node['s-sn'] || slotNameAttr;\n\n            if (relocateNodeData) {\n              // previously we never found a slot home for this node\n              // but turns out we did, so let's remember it now\n              relocateNodeData.$slotRefNode$ = childNode;\n            } else {\n              // add to our list of nodes to relocate\n              relocateNodes.push({\n                $slotRefNode$: childNode,\n                $nodeToRelocate$: node\n              });\n            }\n\n            if (node['s-sr']) {\n              relocateNodes.map(relocateNode => {\n                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                  relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);\n\n                  if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                    relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                  }\n                }\n              });\n            }\n          } else if (!relocateNodes.some(r => r.$nodeToRelocate$ === node)) {\n            // so far this element does not have a slot home, not setting slotRefNode on purpose\n            // if we never find a home for this element then we'll need to hide it\n            relocateNodes.push({\n              $nodeToRelocate$: node\n            });\n          }\n        }\n      }\n    }\n\n    if (childNode.nodeType === 1\n    /* ElementNode */\n    ) {\n      relocateSlotContent(childNode);\n    }\n  }\n};\n\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n  if (nodeToRelocate.nodeType === 1\n  /* ElementNode */\n  ) {\n    if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n      return true;\n    }\n\n    if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (nodeToRelocate['s-sn'] === slotNameAttr) {\n    return true;\n  }\n\n  return slotNameAttr === '';\n};\n\nconst callNodeRefs = vNode => {\n  {\n    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n    vNode.$children$ && vNode.$children$.map(callNodeRefs);\n  }\n};\n\nconst renderVdom = (hostRef, renderFnResults) => {\n  const hostElm = hostRef.$hostElement$;\n  const cmpMeta = hostRef.$cmpMeta$;\n  const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName;\n\n  if (cmpMeta.$attrsToReflect$) {\n    rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n    cmpMeta.$attrsToReflect$.map(_ref => {\n      let [propName, attribute] = _ref;\n      return rootVnode.$attrs$[attribute] = hostElm[propName];\n    });\n  }\n\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4\n  /* isHost */\n  ;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = hostElm;\n  {\n    contentRef = hostElm['s-cr'];\n    useNativeShadowDom = (cmpMeta.$flags$ & 1\n    /* shadowDomEncapsulation */\n    ) !== 0; // always reset\n\n    checkSlotFallbackVisibility = false;\n  } // synchronous patch\n\n  patch(oldVNode, rootVnode);\n  {\n    // while we're moving nodes around existing nodes, temporarily disable\n    // the disconnectCallback from working\n    plt.$flags$ |= 1\n    /* isTmpDisconnected */\n    ;\n\n    if (checkSlotRelocate) {\n      relocateSlotContent(rootVnode.$elm$);\n      let relocateData;\n      let nodeToRelocate;\n      let orgLocationNode;\n      let parentNodeRef;\n      let insertBeforeNode;\n      let refNode;\n      let i = 0;\n\n      for (; i < relocateNodes.length; i++) {\n        relocateData = relocateNodes[i];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n\n        if (!nodeToRelocate['s-ol']) {\n          // add a reference node marking this node's original location\n          // keep a reference to this node for later lookups\n          orgLocationNode = doc.createTextNode('');\n          orgLocationNode['s-nr'] = nodeToRelocate;\n          nodeToRelocate.parentNode.insertBefore(nodeToRelocate['s-ol'] = orgLocationNode, nodeToRelocate);\n        }\n      }\n\n      for (i = 0; i < relocateNodes.length; i++) {\n        relocateData = relocateNodes[i];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n\n        if (relocateData.$slotRefNode$) {\n          // by default we're just going to insert it directly\n          // after the slot reference node\n          parentNodeRef = relocateData.$slotRefNode$.parentNode;\n          insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n          orgLocationNode = nodeToRelocate['s-ol'];\n\n          while (orgLocationNode = orgLocationNode.previousSibling) {\n            refNode = orgLocationNode['s-nr'];\n\n            if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n              refNode = refNode.nextSibling;\n\n              if (!refNode || !refNode['s-nr']) {\n                insertBeforeNode = refNode;\n                break;\n              }\n            }\n          }\n\n          if (!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode || nodeToRelocate.nextSibling !== insertBeforeNode) {\n            // we've checked that it's worth while to relocate\n            // since that the node to relocate\n            // has a different next sibling or parent relocated\n            if (nodeToRelocate !== insertBeforeNode) {\n              if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                // probably a component in the index.html that doesn't have it's hostname set\n                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n              } // add it back to the dom but in its new home\n\n\n              parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n            }\n          }\n        } else {\n          // this node doesn't have a slot home to go to, so let's hide it\n          if (nodeToRelocate.nodeType === 1\n          /* ElementNode */\n          ) {\n            nodeToRelocate.hidden = true;\n          }\n        }\n      }\n    }\n\n    if (checkSlotFallbackVisibility) {\n      updateFallbackSlotVisibility(rootVnode.$elm$);\n    } // done moving nodes around\n    // allow the disconnect callback to work again\n\n\n    plt.$flags$ &= ~1\n    /* isTmpDisconnected */\n    ; // always reset\n\n    relocateNodes.length = 0;\n  }\n};\n\nconst getElement = ref => getHostRef(ref).$hostElement$;\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\n\n\nconst emitEvent = (elm, name, opts) => {\n  const ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\n\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n  if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(r => hostRef.$onRenderResolve$ = r));\n  }\n};\n\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n  {\n    hostRef.$flags$ |= 16\n    /* isQueuedForUpdate */\n    ;\n  }\n\n  if (hostRef.$flags$ & 4\n  /* isWaitingForChildren */\n  ) {\n    hostRef.$flags$ |= 512\n    /* needsRerender */\n    ;\n    return;\n  }\n\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$); // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n\n  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n\n  return writeTask(dispatch);\n};\n\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n  const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  const instance = hostRef.$lazyInstance$;\n  let promise;\n  {\n    promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n  }\n  endSchedule();\n  return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n  // updateComponent\n  const elm = hostRef.$hostElement$;\n  const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n  const rc = elm['s-rc'];\n\n  if (isInitialLoad) {\n    // DOM WRITE!\n    attachStyles(hostRef);\n  }\n\n  const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n  {\n    callRender(hostRef, instance);\n  }\n\n  if (rc) {\n    // ok, so turns out there are some child host elements\n    // waiting on this parent element to load\n    // let's fire off all update callbacks waiting\n    rc.map(cb => cb());\n    elm['s-rc'] = undefined;\n  }\n\n  endRender();\n  endUpdate();\n  {\n    const childrenPromises = elm['s-p'];\n\n    const postUpdate = () => postUpdateComponent(hostRef);\n\n    if (childrenPromises.length === 0) {\n      postUpdate();\n    } else {\n      Promise.all(childrenPromises).then(postUpdate);\n      hostRef.$flags$ |= 4\n      /* isWaitingForChildren */\n      ;\n      childrenPromises.length = 0;\n    }\n  }\n};\n\nconst callRender = (hostRef, instance, elm) => {\n  try {\n    instance = instance.render();\n    {\n      hostRef.$flags$ &= ~16\n      /* isQueuedForUpdate */\n      ;\n    }\n    {\n      hostRef.$flags$ |= 2\n      /* hasRendered */\n      ;\n    }\n    {\n      {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        {\n          renderVdom(hostRef, instance);\n        }\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n\n  return null;\n};\n\nconst postUpdateComponent = hostRef => {\n  const tagName = hostRef.$cmpMeta$.$tagName$;\n  const elm = hostRef.$hostElement$;\n  const endPostUpdate = createTime('postUpdate', tagName);\n  const instance = hostRef.$lazyInstance$;\n  const ancestorComponent = hostRef.$ancestorComponent$;\n\n  if (!(hostRef.$flags$ & 64\n  /* hasLoadedComponent */\n  )) {\n    hostRef.$flags$ |= 64\n    /* hasLoadedComponent */\n    ;\n    {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n    {\n      safeCall(instance, 'componentDidLoad');\n    }\n    endPostUpdate();\n    {\n      hostRef.$onReadyResolve$(elm);\n\n      if (!ancestorComponent) {\n        appDidLoad();\n      }\n    }\n  } else {\n    endPostUpdate();\n  } // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n\n\n  {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n\n    if (hostRef.$flags$ & 512\n    /* needsRerender */\n    ) {\n      nextTick(() => scheduleUpdate(hostRef, false));\n    }\n\n    hostRef.$flags$ &= ~(4\n    /* isWaitingForChildren */\n    | 512\n    /* needsRerender */\n    );\n  } // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n};\n\nconst appDidLoad = who => {\n  // on appload\n  // we have finish the first big initial render\n  {\n    addHydratedFlag(doc.documentElement);\n  }\n  nextTick(() => emitEvent(win, 'appload', {\n    detail: {\n      namespace: NAMESPACE\n    }\n  }));\n};\n\nconst safeCall = (instance, method, arg) => {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  return undefined;\n};\n\nconst then = (promise, thenFn) => {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\n\nconst addHydratedFlag = elm => elm.classList.add('hydrated');\n\nconst parsePropertyValue = (propValue, propType) => {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (propType & 4\n    /* Boolean */\n    ) {\n      // per the HTML spec, any string value means it is a boolean true value\n      // but we'll cheat here and say that the string \"false\" is the boolean false\n      return propValue === 'false' ? false : propValue === '' || !!propValue;\n    }\n\n    if (propType & 2\n    /* Number */\n    ) {\n      // force it to be a number\n      return parseFloat(propValue);\n    }\n\n    if (propType & 1\n    /* String */\n    ) {\n      // could have been passed as a number or boolean\n      // but we still want it as a string\n      return String(propValue);\n    } // redundant return here for better minification\n\n\n    return propValue;\n  } // not sure exactly what type we want\n  // so no need to change to a different type\n\n\n  return propValue;\n};\n\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\n\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n  // check our new property value against our internal value\n  const hostRef = getHostRef(ref);\n  const elm = hostRef.$hostElement$;\n  const oldVal = hostRef.$instanceValues$.get(propName);\n  const flags = hostRef.$flags$;\n  const instance = hostRef.$lazyInstance$;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n\n  if ((!(flags & 8\n  /* isConstructingInstance */\n  ) || oldVal === undefined) && newVal !== oldVal) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n\n    if (instance) {\n      // get an array of method names of watch functions to call\n      if (cmpMeta.$watchers$ && flags & 128\n      /* isWatchReady */\n      ) {\n        const watchMethods = cmpMeta.$watchers$[propName];\n\n        if (watchMethods) {\n          // this instance is watching for when this property changed\n          watchMethods.map(watchMethodName => {\n            try {\n              // fire off each of the watch methods that are watching this property\n              instance[watchMethodName](newVal, oldVal, propName);\n            } catch (e) {\n              consoleError(e, elm);\n            }\n          });\n        }\n      }\n\n      if ((flags & (2\n      /* hasRendered */\n      | 16\n      /* isQueuedForUpdate */\n      )) === 2\n      /* hasRendered */\n      ) {\n        // looks like this value actually changed, so we've got work to do!\n        // but only if we've already rendered, otherwise just chill out\n        // queue that we need to do an update, but don't worry about queuing\n        // up millions cuz this function ensures it only runs once\n        scheduleUpdate(hostRef, false);\n      }\n    }\n  }\n};\n\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n  if (cmpMeta.$members$) {\n    if (Cstr.watchers) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    } // It's better to have a const than two Object.entries()\n\n\n    const members = Object.entries(cmpMeta.$members$);\n    const prototype = Cstr.prototype;\n    members.map(_ref2 => {\n      let [memberName, [memberFlags]] = _ref2;\n\n      if (memberFlags & 31\n      /* Prop */\n      || flags & 2\n      /* proxyState */\n      && memberFlags & 32\n      /* State */\n      ) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n\n          set(newValue) {\n            // proxyComponent, set value\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n\n          configurable: true,\n          enumerable: true\n        });\n      }\n    });\n\n    if (flags & 1\n    /* isElementConstructor */\n    ) {\n      const attrNameToPropName = new Map();\n\n      prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n        plt.jmp(() => {\n          const propName = attrNameToPropName.get(attrName); //  In a webcomponent lifecyle the attributeChangedCallback runs prior to connectedCallback\n          //  in the case where an attribute was set inline.\n          //  ```html\n          //    <my-component some-attribute=\"some-value\"></my-component>\n          //  ```\n          //\n          //  There is an edge case where a developer sets the attribute inline on a custom element and then programatically\n          //  changes it before it has been upgraded as shown below:\n          //\n          //  ```html\n          //    <!-- this component has _not_ been upgraded yet -->\n          //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n          //    <script>\n          //      // grab non-upgraded component\n          //      el = document.querySelector(\"#test\");\n          //      el.someAttribute = \"another-value\";\n          //      // upgrade component\n          //      cutsomElements.define('my-component', MyComponent);\n          //    </script>\n          //  ```\n          //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n          //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n          //  to the value that was set inline i.e. \"some-value\" from above example. When\n          //  the connectedCallback attempts to unshadow it will use \"some-value\" as the intial value rather than \"another-value\"\n          //\n          //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n          //  by connectedCallback as this attributeChangedCallback will not fire.\n          //\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n          //\n          //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n          //  properties here given that this goes against best practices outlined here\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n\n          if (this.hasOwnProperty(propName)) {\n            newValue = this[propName];\n            delete this[propName];\n          }\n\n          this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n        });\n      }; // create an array of attributes to observe\n      // and also create a map of html attribute name to js property name\n\n\n      Cstr.observedAttributes = members.filter(_ref3 => {\n        let [_, m] = _ref3;\n        return m[0] & 15;\n      }\n      /* HasAttribute */\n      ) // filter to only keep props that should match attributes\n      .map(_ref4 => {\n        let [propName, m] = _ref4;\n        const attrName = m[1] || propName;\n        attrNameToPropName.set(attrName, propName);\n\n        if (m[0] & 512\n        /* ReflectAttr */\n        ) {\n          cmpMeta.$attrsToReflect$.push([propName, attrName]);\n        }\n\n        return attrName;\n      });\n    }\n  }\n\n  return Cstr;\n};\n\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n  // initializeComponent\n  if ((hostRef.$flags$ & 32\n  /* hasInitializedComponent */\n  ) === 0) {\n    {\n      // we haven't initialized this element yet\n      hostRef.$flags$ |= 32\n      /* hasInitializedComponent */\n      ; // lazy loaded components\n      // request the component's implementation to be\n      // wired up with the host element\n\n      Cstr = loadModule(cmpMeta);\n\n      if (Cstr.then) {\n        // Await creates a micro-task avoid if possible\n        const endLoad = uniqueTime();\n        Cstr = await Cstr;\n        endLoad();\n      }\n\n      if (!Cstr.isProxied) {\n        // we've never proxied this Constructor before\n        // let's add the getters/setters to its prototype before\n        // the first time we create an instance of the implementation\n        {\n          cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        proxyComponent(Cstr, cmpMeta, 2\n        /* proxyState */\n        );\n        Cstr.isProxied = true;\n      }\n\n      const endNewInstance = createTime('createInstance', cmpMeta.$tagName$); // ok, time to construct the instance\n      // but let's keep track of when we start and stop\n      // so that the getters/setters don't incorrectly step on data\n\n      {\n        hostRef.$flags$ |= 8\n        /* isConstructingInstance */\n        ;\n      } // construct the lazy-loaded component implementation\n      // passing the hostRef is very important during\n      // construction in order to directly wire together the\n      // host element and the lazy-loaded instance\n\n      try {\n        new Cstr(hostRef);\n      } catch (e) {\n        consoleError(e);\n      }\n\n      {\n        hostRef.$flags$ &= ~8\n        /* isConstructingInstance */\n        ;\n      }\n      {\n        hostRef.$flags$ |= 128\n        /* isWatchReady */\n        ;\n      }\n      endNewInstance();\n    }\n\n    if (Cstr.style) {\n      // this component has styles but we haven't registered them yet\n      let style = Cstr.style;\n      const scopeId = getScopeId(cmpMeta);\n\n      if (!styles.has(scopeId)) {\n        const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n        registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1\n        /* shadowDomEncapsulation */\n        ));\n        endRegisterStyles();\n      }\n    }\n  } // we've successfully created a lazy instance\n\n\n  const ancestorComponent = hostRef.$ancestorComponent$;\n\n  const schedule = () => scheduleUpdate(hostRef, true);\n\n  if (ancestorComponent && ancestorComponent['s-rc']) {\n    // this is the intial load and this component it has an ancestor component\n    // but the ancestor component has NOT fired its will update lifecycle yet\n    // so let's just cool our jets and wait for the ancestor to continue first\n    // this will get fired off when the ancestor component\n    // finally gets around to rendering its lazy self\n    // fire off the initial update\n    ancestorComponent['s-rc'].push(schedule);\n  } else {\n    schedule();\n  }\n};\n\nconst connectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const cmpMeta = hostRef.$cmpMeta$;\n    const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n\n    if (!(hostRef.$flags$ & 1\n    /* hasConnected */\n    )) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1\n      /* hasConnected */\n      ;\n      {\n        // initUpdate\n        // if the slot polyfill is required we'll need to put some nodes\n        // in here to act as original content anchors as we move nodes around\n        // host element has been connected to the DOM\n        if (cmpMeta.$flags$ & (4\n        /* hasSlotRelocation */\n        | 8\n        /* needsShadowDomShim */\n        )) {\n          setContentReference(elm);\n        }\n      }\n      {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        let ancestorComponent = elm;\n\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      } // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n\n      if (cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(_ref5 => {\n          let [memberName, [memberFlags]] = _ref5;\n\n          if (memberFlags & 31\n          /* Prop */\n          && elm.hasOwnProperty(memberName)) {\n            const value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n\n      {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    }\n\n    endConnected();\n  }\n};\n\nconst setContentReference = elm => {\n  // only required when we're NOT using native shadow dom (slot)\n  // or this browser doesn't support native shadow dom\n  // and this host element was NOT created with SSR\n  // let's pick out the inner content for slot projection\n  // create a node to represent where the original\n  // content was first placed, which is useful later on\n  const contentRefElm = elm['s-cr'] = doc.createComment('');\n  contentRefElm['s-cn'] = true;\n  elm.insertBefore(contentRefElm, elm.firstChild);\n};\n\nconst disconnectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const instance = hostRef.$lazyInstance$;\n    {\n      safeCall(instance, 'disconnectedCallback');\n    }\n  }\n};\n\nconst bootstrapLazy = function (lazyBundles) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const endBootstrap = createTime();\n  const cmpTags = [];\n  const exclude = options.exclude || [];\n  const customElements = win.customElements;\n  const head = doc.head;\n  const metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  const visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  const deferredConnectedCallbacks = [];\n  let appLoadFallback;\n  let isBootstrapping = true;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n  lazyBundles.map(lazyBundle => lazyBundle[1].map(compactMeta => {\n    const cmpMeta = {\n      $flags$: compactMeta[0],\n      $tagName$: compactMeta[1],\n      $members$: compactMeta[2],\n      $listeners$: compactMeta[3]\n    };\n    {\n      cmpMeta.$members$ = compactMeta[2];\n    }\n    {\n      cmpMeta.$attrsToReflect$ = [];\n    }\n    {\n      cmpMeta.$watchers$ = {};\n    }\n    const tagName = cmpMeta.$tagName$;\n    const HostElement = class extends HTMLElement {\n      // StencilLazyHost\n      constructor(self) {\n        // @ts-ignore\n        super(self);\n        self = this;\n        registerHost(self, cmpMeta);\n      }\n\n      connectedCallback() {\n        if (appLoadFallback) {\n          clearTimeout(appLoadFallback);\n          appLoadFallback = null;\n        }\n\n        if (isBootstrapping) {\n          // connectedCallback will be processed once all components have been registered\n          deferredConnectedCallbacks.push(this);\n        } else {\n          plt.jmp(() => connectedCallback(this));\n        }\n      }\n\n      disconnectedCallback() {\n        plt.jmp(() => disconnectedCallback(this));\n      }\n\n      componentOnReady() {\n        return getHostRef(this).$onReadyPromise$;\n      }\n\n    };\n    cmpMeta.$lazyBundleId$ = lazyBundle[0];\n\n    if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n      cmpTags.push(tagName);\n      customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1\n      /* isElementConstructor */\n      ));\n    }\n  }));\n  {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  } // Process deferred connectedCallbacks now all components have been registered\n\n  isBootstrapping = false;\n\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(host => host.connectedCallback());\n  } else {\n    {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));\n    }\n  } // Fallback appLoad event\n\n\n  endBootstrap();\n};\n\nconst hostRefs = new WeakMap();\n\nconst getHostRef = ref => hostRefs.get(ref);\n\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\n\nconst registerHost = (elm, cmpMeta) => {\n  const hostRef = {\n    $flags$: 0,\n    $hostElement$: elm,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n  {\n    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);\n    elm['s-p'] = [];\n    elm['s-rc'] = [];\n  }\n  return hostRefs.set(elm, hostRef);\n};\n\nconst isMemberInElement = (elm, memberName) => memberName in elm;\n\nconst consoleError = (e, el) => (0, console.error)(e, el);\n\nconst cmpModules = /*@__PURE__*/new Map();\n\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n  // loadModuleImport\n  const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  const bundleId = cmpMeta.$lazyBundleId$;\n  const module = cmpModules.get(bundleId);\n\n  if (module) {\n    return module[exportName];\n  }\n\n  return Promise.resolve().then(function () {\n    return /*#__PURE__*/_interopNamespace(require(\n    /* webpackInclude: /\\.entry\\.js$/ */\n\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`));\n  }).then(importedModule => {\n    {\n      cmpModules.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\n\nconst styles = new Map();\nconst queueDomReads = [];\nconst queueDomWrites = [];\n\nconst queueTask = (queue, write) => cb => {\n  queue.push(cb);\n\n  if (!queuePending) {\n    queuePending = true;\n\n    if (write && plt.$flags$ & 4\n    /* queueSync */\n    ) {\n      nextTick(flush);\n    } else {\n      plt.raf(flush);\n    }\n  }\n};\n\nconst consume = queue => {\n  for (let i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  queue.length = 0;\n};\n\nconst flush = () => {\n  // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n  consume(queueDomReads); // DOM WRITES!!!\n\n  {\n    consume(queueDomWrites);\n\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\n\nconst nextTick = /*@__PURE__*/cb => promiseResolve().then(cb);\n\nconst writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nexports.Host = Host;\nexports.bootstrapLazy = bootstrapLazy;\nexports.getElement = getElement;\nexports.h = h;\nexports.promiseResolve = promiseResolve;\nexports.registerInstance = registerInstance;","map":{"version":3,"sources":["/home/huanchieh/Downloads/acgen-main/node_modules/@skyra/discord-components-core/dist/cjs/index-1b96e428.js"],"names":["_interopNamespace","e","__esModule","n","Object","create","keys","forEach","k","d","getOwnPropertyDescriptor","defineProperty","get","enumerable","freeze","NAMESPACE","contentRef","hostTagName","useNativeShadowDom","checkSlotFallbackVisibility","checkSlotRelocate","isSvgMode","queuePending","win","window","doc","document","head","plt","$flags$","$resourcesUrl$","jmp","h","raf","requestAnimationFrame","ael","el","eventName","listener","opts","addEventListener","rel","removeEventListener","ce","CustomEvent","promiseResolve","v","Promise","resolve","supportsConstructibleStylesheets","CSSStyleSheet","replace","HYDRATED_CSS","XLINK_NS","createTime","fnName","tagName","uniqueTime","key","measureText","rootAppliedStyles","WeakMap","registerStyle","scopeId","cssText","allowCS","style","styles","set","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","nodeType","appliedStyles","styleElm","Set","has","createElement","innerHTML","insertBefore","querySelector","add","adoptedStyleSheets","includes","attachStyles","hostRef","$cmpMeta$","elm","$hostElement$","endAttachStyles","$tagName$","getRootNode","cmp","EMPTY_OBJ","SVG_NS","HTML_NS","isComplexType","o","nodeName","vnodeData","child","slotName","simple","lastSimple","vNodeChildren","walk","c","i","length","Array","isArray","String","$text$","push","newVNode","children","name","classData","className","class","filter","join","vdomFnUtils","vnode","$attrs$","$children$","$key$","$name$","tag","text","$tag$","$elm$","Host","isHost","node","cb","map","convertToPublic","convertToPrivate","vattrs","vchildren","vkey","vname","vtag","vtext","assign","setAccessor","memberName","oldValue","newValue","isSvg","flags","isProp","isMemberInElement","ln","toLowerCase","classList","oldClasses","parseClassList","newClasses","remove","prop","removeProperty","setProperty","slice","isComplex","xlink","getAttribute","removeAttributeNS","removeAttribute","setAttributeNS","setAttribute","parseClassListRegex","value","split","updateElement","oldVnode","newVnode","host","oldVnodeAttrs","newVnodeAttrs","undefined","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","oldVNode","createTextNode","createElementNS","appendChild","putBackInOriginalLocation","recursive","oldSlotChildNodes","childNodes","parentReferenceNode","referenceNode","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","parentNode","removeVnodes","callNodeRefs","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","idxInOld","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","elmToMove","isSameVnode","patch","nextSibling","vnode1","vnode2","oldChildren","newChildren","defaultHolder","textContent","data","updateFallbackSlotVisibility","ilen","j","slotNameAttr","hidden","trim","relocateNodes","relocateSlotContent","hostContentNodes","relocateNodeData","isNodeLocatedInSlot","find","r","$nodeToRelocate$","$slotRefNode$","relocateNode","some","nodeToRelocate","vNode","ref","renderVdom","renderFnResults","$vnode$","rootVnode","$attrsToReflect$","propName","attribute","relocateData","orgLocationNode","parentNodeRef","insertBeforeNode","refNode","previousSibling","getElement","getHostRef","emitEvent","ev","dispatchEvent","attachToAncestor","ancestorComponent","$onRenderResolve$","scheduleUpdate","isInitialLoad","$ancestorComponent$","dispatch","dispatchHooks","writeTask","endSchedule","instance","$lazyInstance$","promise","then","safeCall","updateComponent","endUpdate","rc","endRender","callRender","childrenPromises","postUpdate","postUpdateComponent","all","render","consoleError","endPostUpdate","addHydratedFlag","$onReadyResolve$","appDidLoad","nextTick","who","documentElement","detail","namespace","method","arg","thenFn","parsePropertyValue","propValue","propType","parseFloat","getValue","$instanceValues$","setValue","newVal","oldVal","$members$","$watchers$","watchMethods","watchMethodName","proxyComponent","Cstr","watchers","members","entries","prototype","memberFlags","configurable","attrNameToPropName","Map","attributeChangedCallback","attrName","_oldValue","hasOwnProperty","observedAttributes","_","m","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","endRegisterStyles","schedule","connectedCallback","endConnected","setContentReference","contentRefElm","createComment","firstChild","disconnectedCallback","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","URL","resourcesUrl","baseURI","href","lazyBundle","compactMeta","$listeners$","HostElement","HTMLElement","constructor","self","registerHost","clearTimeout","componentOnReady","$onReadyPromise$","$lazyBundleId$","define","setTimeout","hostRefs","registerInstance","lazyInstance","console","error","cmpModules","exportName","bundleId","module","require","importedModule","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","performance","now","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n['default'] = e;\n  return Object.freeze(n);\n}\n\nconst NAMESPACE = 'skyra-discord-components-core';\n\nlet contentRef;\nlet hostTagName;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructibleStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replace === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta);\n    let style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    addStyle(elm.getRootNode(), cmpMeta);\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let key = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    let vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        // normalize class / classname attributes\n        if (vnodeData.key) {\n            key = vnodeData.key;\n        }\n        if (vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    if (typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    {\n        vnode.$key$ = key;\n    }\n    {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    {\n        vnode.$key$ = null;\n    }\n    {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\nconst vdomFnUtils = {\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),\n};\nconst convertToPublic = (node) => ({\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$,\n});\nconst convertToPrivate = (node) => {\n    if (typeof node.vtag === 'function') {\n        const vnodeData = Object.assign({}, node.vattrs);\n        if (node.vkey) {\n            vnodeData.key = node.vkey;\n        }\n        if (node.vname) {\n            vnodeData.name = node.vname;\n        }\n        return h(node.vtag, vnodeData, ...(node.vchildren || []));\n    }\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (memberName === 'style') {\n            // update style attribute, css properties and values\n            {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if (memberName === 'key')\n            ;\n        else if (memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if ((!isProp ) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        let n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                            // tslint:disable-next-line: triple-equals\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            /**\n             * Need to manually update attribute if:\n             * - memberName is not an attribute\n             * - if we are rendering the host element in order to reflect attribute\n             * - if it's a SVG, since properties might not work in <svg>\n             * - if the newValue is null/undefined or 'false'.\n             */\n            let xlink = false;\n            {\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n                    memberName = ln;\n                    xlink = true;\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    if (xlink) {\n                        elm.removeAttributeNS(XLINK_NS, memberName);\n                    }\n                    else {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                if (xlink) {\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\n                }\n                else {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    let newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (!useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* isSlotReference */;\n        }\n    }\n    if (newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if (newVNode.$flags$ & 1 /* isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ =\n            doc.createTextNode('');\n    }\n    else {\n        if (!isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode.$flags$ & 2 /* isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$)\n            );\n        if (isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    {\n        elm['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    plt.$flags$ |= 1 /* isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot in need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* isTmpDisconnected */;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ((parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, referenceNode(before) );\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            callNodeRefs(vnode);\n            {\n                // we're removing this element\n                // so it's possible we need to show slot fallback content now\n                checkSlotFallbackVisibility = true;\n                if (elm['s-ol']) {\n                    // remove the original location comment\n                    elm['s-ol'].remove();\n                }\n                else {\n                    // it's possible that child nodes of the node\n                    // that's being removed are slot nodes\n                    putBackInOriginalLocation(elm, true);\n                }\n            }\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // Vnode moved right\n            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // Vnode moved left\n            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // createKeyToOldIdx\n            idxInOld = -1;\n            {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if (idxInOld >= 0) {\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        if (vnode1.$tag$ === 'slot') {\n            return vnode1.$name$ === vnode2.$name$;\n        }\n        {\n            return vnode1.$key$ === vnode2.$key$;\n        }\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if (text === null) {\n        {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        // element node\n        {\n            if (tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if ((defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    }\n    else if (oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst updateFallbackSlotVisibility = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNodes = elm.childNodes;\n    let childNode;\n    let i;\n    let ilen;\n    let j;\n    let slotNameAttr;\n    let nodeType;\n    for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                slotNameAttr = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                for (j = 0; j < ilen; j++) {\n                    nodeType = childNodes[j].nodeType;\n                    if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n                        // this sibling node is from a different component OR is a named fallback slot node\n                        if (nodeType === 1 /* ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                    else {\n                        // this is a default fallback slot node\n                        // any element or text node (with content)\n                        // should hide the default fallback slot node\n                        if (nodeType === 1 /* ElementNode */ ||\n                            (nodeType === 3 /* TextNode */ && childNodes[j].textContent.trim() !== '')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\nconst relocateNodes = [];\nconst relocateSlotContent = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNode;\n    let node;\n    let hostContentNodes;\n    let slotNameAttr;\n    let relocateNodeData;\n    let j;\n    let i = 0;\n    let childNodes = elm.childNodes;\n    let ilen = childNodes.length;\n    for (; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n            // first got the content reference comment node\n            // then we got it's parent, which is where all the host content is in now\n            hostContentNodes = node.parentNode.childNodes;\n            slotNameAttr = childNode['s-sn'];\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n                    // let's do some relocating to its new home\n                    // but never relocate a content reference node\n                    // that is suppose to always represent the original content location\n                    if (isNodeLocatedInSlot(node, slotNameAttr)) {\n                        // it's possible we've already decided to relocate this node\n                        relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        node['s-sn'] = node['s-sn'] || slotNameAttr;\n                        if (relocateNodeData) {\n                            // previously we never found a slot home for this node\n                            // but turns out we did, so let's remember it now\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map((relocateNode) => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\n                        // so far this element does not have a slot home, not setting slotRefNode on purpose\n                        // if we never find a home for this element then we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            relocateSlotContent(childNode);\n        }\n    }\n};\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotNameAttr) {\n        return true;\n    }\n    return slotNameAttr === '';\n};\nconst callNodeRefs = (vNode) => {\n    {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(callNodeRefs);\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    if (cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm);\n    {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* isTmpDisconnected */;\n        if (checkSlotRelocate) {\n            relocateSlotContent(rootVnode.$elm$);\n            let relocateData;\n            let nodeToRelocate;\n            let orgLocationNode;\n            let parentNodeRef;\n            let insertBeforeNode;\n            let refNode;\n            let i = 0;\n            for (; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    orgLocationNode =\n                        doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (i = 0; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (relocateData.$slotRefNode$) {\n                    // by default we're just going to insert it directly\n                    // after the slot reference node\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n                    orgLocationNode = nodeToRelocate['s-ol'];\n                    while ((orgLocationNode = orgLocationNode.previousSibling)) {\n                        refNode = orgLocationNode['s-nr'];\n                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                            refNode = refNode.nextSibling;\n                            if (!refNode || !refNode['s-nr']) {\n                                insertBeforeNode = refNode;\n                                break;\n                            }\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||\n                        nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have it's hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // add it back to the dom but in its new home\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* isTmpDisconnected */;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\nconst getElement = (ref) => (getHostRef(ref).$hostElement$ );\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    let promise;\n    {\n        promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    try {\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = hostRef.$lazyInstance$ ;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        {\n            safeCall(instance, 'componentDidLoad');\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 4 /* Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (propType & 2 /* Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (propType & 1 /* String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = hostRef.$hostElement$ ;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    if ((!(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && newVal !== oldVal) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            // get an array of method names of watch functions to call\n            if (cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if ((flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (cmpMeta.$members$) {\n        if (Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* Prop */ ||\n                    ((flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n        if ((flags & 1 /* isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a webcomponent lifecyle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then programatically\n                    //  changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      cutsomElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the intial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (m[0] & 512 /* ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            {\n                hostRef.$flags$ |= 128 /* isWatchReady */;\n            }\n            endNewInstance();\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the intial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if ((cmpMeta.$flags$ & (4 /* hasSlotRelocation */ | 8 /* needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment(''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance = hostRef.$lazyInstance$ ;\n        {\n            safeCall(instance, 'disconnectedCallback');\n        }\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map((lazyBundle) => lazyBundle[1].map((compactMeta) => {\n        const cmpMeta = {\n            $flags$: compactMeta[0],\n            $tagName$: compactMeta[1],\n            $members$: compactMeta[2],\n            $listeners$: compactMeta[3],\n        };\n        {\n            cmpMeta.$members$ = compactMeta[2];\n        }\n        {\n            cmpMeta.$attrsToReflect$ = [];\n        }\n        {\n            cmpMeta.$watchers$ = {};\n        }\n        const tagName = cmpMeta.$tagName$;\n        const HostElement = class extends HTMLElement {\n            // StencilLazyHost\n            constructor(self) {\n                // @ts-ignore\n                super(self);\n                self = this;\n                registerHost(self, cmpMeta);\n            }\n            connectedCallback() {\n                if (appLoadFallback) {\n                    clearTimeout(appLoadFallback);\n                    appLoadFallback = null;\n                }\n                if (isBootstrapping) {\n                    // connectedCallback will be processed once all components have been registered\n                    deferredConnectedCallbacks.push(this);\n                }\n                else {\n                    plt.jmp(() => connectedCallback(this));\n                }\n            }\n            disconnectedCallback() {\n                plt.jmp(() => disconnectedCallback(this));\n            }\n            componentOnReady() {\n                return getHostRef(this).$onReadyPromise$;\n            }\n        };\n        cmpMeta.$lazyBundleId$ = lazyBundle[0];\n        if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n            cmpTags.push(tagName);\n            customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n        }\n    }));\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require(\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`)); }).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexports.Host = Host;\nexports.bootstrapLazy = bootstrapLazy;\nexports.getElement = getElement;\nexports.h = h;\nexports.promiseResolve = promiseResolve;\nexports.registerInstance = registerInstance;\n"]},"metadata":{},"sourceType":"script"}